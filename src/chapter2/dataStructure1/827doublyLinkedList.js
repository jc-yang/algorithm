/*
实现一个双链表，双链表初始为空，支持 5 种操作：

在最左侧插入一个数；
在最右侧插入一个数；
将第 k 个插入的数删除；
在第 k 个插入的数左侧插入一个数；
在第 k 个插入的数右侧插入一个数
现在要对该链表进行 M 次操作，进行完所有操作后，从左到右输出整个链表。

注意:题目中第 k 个插入的数并不是指当前链表的第 k 个数。例如操作过程中一共插入了 n 个数，则按照插入的时间顺序，这 n 个数依次为：第 1 个插入的数，第 2 个插入的数，…第 n 个插入的数。

输入格式
第一行包含整数 M，表示操作次数。

接下来 M 行，每行包含一个操作命令，操作命令可能为以下几种：

L x，表示在链表的最左端插入数 x。
R x，表示在链表的最右端插入数 x。
D k，表示将第 k 个插入的数删除。
IL k x，表示在第 k 个插入的数左侧插入一个数。
IR k x，表示在第 k 个插入的数右侧插入一个数。
输出格式
共一行，将整个链表从左到右输出。

数据范围
1≤M≤100000
所有操作保证合法。

输入样例：
10
R 7
D 1
L 3
IL 2 10
D 3
IL 2 7
L 8
R 9
IL 4 7
IR 2 2

输出样例：
8 7 7 3 2 9
 */
const N = 100010
// e[i] 表示节点i的值
// l[i]表示节点 i 的左边节点的下标，r[i]表示节点 i 的右边节点的下标
// idx 存储当前已经用到了哪个点（下标）
let e = new Array(N).fill(0), l = new Array(N).fill(0), r = new Array(N).fill(0), idx

// 此处不定义头节点和尾节点，令 下标为0的点为头节点，head=0；下标为1的点为尾结点，tail=1

// 初始化
function init() {
    // 0表示头节点，1表示尾结点
    // 初始值，头节点的右节点是尾结点，尾结点的左节点是头节点
    r[0] = 1
    l[1] = 0
    idx = 2 // 0和1已经占用过了，所以下标从2开始
}

// 在第k点的右边插入节点x
function add(k, x) {
    e[idx] = x
    // 先处理新节点
    r[idx] = r[k] // 节点的右指针，是k节点的右指针
    l[idx] = k // 左指针指向k
    // 再处理旧节点，以下两步顺序不能反
    l[r[k]] = idx // 下一个节点（r[k]）的左节点l[r[k]] 指向当前节点
    r[k] = idx // k节点的右节点是当前节点
}
// 如果是要在k的左边插入节点x，则调用 add(l[k], x)，注意 k-1 不一定是 k 的上一个节点

// 删除第k个节点
function remove(k) {
    r[l[k]] = r[k] // k节点的左节点的右节点是k节点的右节点
    l[r[k]] = l[k] // k节点的右节点的左节点是k节点的左节点
}


